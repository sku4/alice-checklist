// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	googlekeep "github.com/sku4/alice-checklist/models/googlekeep"
)

// MockChecklist is a mock of Checklist interface.
type MockChecklist struct {
	ctrl     *gomock.Controller
	recorder *MockChecklistMockRecorder
}

// MockChecklistMockRecorder is the mock recorder for MockChecklist.
type MockChecklistMockRecorder struct {
	mock *MockChecklist
}

// NewMockChecklist creates a new mock instance.
func NewMockChecklist(ctrl *gomock.Controller) *MockChecklist {
	mock := &MockChecklist{ctrl: ctrl}
	mock.recorder = &MockChecklistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChecklist) EXPECT() *MockChecklistMockRecorder {
	return m.recorder
}

// CacheList mocks base method.
func (m *MockChecklist) CacheList() ([]googlekeep.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheList")
	ret0, _ := ret[0].([]googlekeep.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheList indicates an expected call of CacheList.
func (mr *MockChecklistMockRecorder) CacheList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheList", reflect.TypeOf((*MockChecklist)(nil).CacheList))
}

// List mocks base method.
func (m *MockChecklist) List() ([]googlekeep.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]googlekeep.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockChecklistMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockChecklist)(nil).List))
}

// Patch mocks base method.
func (m *MockChecklist) Patch(add, delete []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", add, delete)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockChecklistMockRecorder) Patch(add, delete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockChecklist)(nil).Patch), add, delete)
}

// MockNotify is a mock of Notify interface.
type MockNotify struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyMockRecorder
}

// MockNotifyMockRecorder is the mock recorder for MockNotify.
type MockNotifyMockRecorder struct {
	mock *MockNotify
}

// NewMockNotify creates a new mock instance.
func NewMockNotify(ctrl *gomock.Controller) *MockNotify {
	mock := &MockNotify{ctrl: ctrl}
	mock.recorder = &MockNotifyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotify) EXPECT() *MockNotifyMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockNotify) Add(arg0 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockNotifyMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockNotify)(nil).Add), arg0)
}

// Get mocks base method.
func (m *MockNotify) Get() ([]error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNotifyMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNotify)(nil).Get))
}

// Truncate mocks base method.
func (m *MockNotify) Truncate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truncate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Truncate indicates an expected call of Truncate.
func (mr *MockNotifyMockRecorder) Truncate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockNotify)(nil).Truncate))
}
