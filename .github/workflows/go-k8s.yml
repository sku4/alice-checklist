name: Go

on:
  push:
    branches: [ master ]

env:
  REGISTRY: "registry.digitalocean.com/sku4"
  REPOSITORY: "repository"
  CONTAINER_NAME: "alice"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Build container image
        run: docker build -t $(echo $REGISTRY)/$(echo $REPOSITORY):$(echo $CONTAINER_NAME)-$(echo $GITHUB_SHA | head -c7) .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Delete previous digest manifest
        run: |
          prevManifest="$(doctl registry repository list-manifests repository \
            --format Digest,Tags --no-header=true | grep alice | cut -c1-72)"
          if [ -n "$prevManifest" ]
          then
              echo "Previous digest manifest ${prevManifest}"
              doctl registry repository delete-manifest --force $(echo $REPOSITORY) $(echo $prevManifest)
              echo "Start garbage collection clean"
              doctl registry garbage-collection start --force
          else
              echo "Not found previous digest manifest"
          fi

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $REPOSITORY):$(echo $CONTAINER_NAME)-$(echo $GITHUB_SHA | head -c7)

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          envs: REPOSITORY,REGISTRY,GITHUB_SHA,CONTAINER_NAME
          script: |
            echo "hello"
